<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY versionNumber "0.2.0">
	<!ENTITY copyrightYear "2010-2012">
	<!ENTITY copyrightHolder "ToToTec GbR, Tobias Roeser und Tobias Lahn">
]>
<book>

<bookinfo>
	<title>Configured Maven (Cmvn)</title>
	<subtitle>User Manual</subtitle>
	<productname>Cmvn</productname>
	<releaseinfo>&versionNumber;</releaseinfo>
	<authorgroup>
		<author>
			<firstname>Tobias</firstname>
			<surname>Roeser</surname>
		</author>
	</authorgroup>
	<copyright>
		<year>&copyrightYear;</year>
		<holder>&copyrightHolder;</holder>
	</copyright>
</bookinfo>

<toc />
	
<chapter id="ch:intro"><title>Introduction</title>
	
<para>
Cmvn is a helper tool for developers targeted at the Java Virtual Machine (JVM). Its main focus is to declaratively describe and configure the required development and build environment.
</para>
<para>
A most significant difference between existing Java-targeted build systems compared to those for C/C++<footnote><para>e.g. Autotools + GNU Make, CMake, Scons.</para></footnote> is the lack of a defined configuration step before executing the compiler. 
Although building a Java application is a lot more easy compared to platform dependent programming languages and tools, nevertheless a lot of the (configuration) tasks of those other build systems are still required. 
Often the lack of a configuration process in Java build systems results in very obscure setups.
</para>
<para>
A very popular build system for Java is Apache Maven<footnote><para><ulink url="http://maven.apache.org">http://maven.apache.org</ulink></para>
</footnote>, currently in version 3. 
It partially helps the developer with managing her dependencies but fails miserably at producing reliable builds, at least without support of a complex build infrastructure.<footnote><para>...like a Repository Manager.</para></footnote>
</para>
<para>
Cmvn tries to close this gap by providing a configuration step before the actual build system. 
Concrete, this goal will be reached by	generating the build scripts for the underlying  (native) build system. 
Whenever a configuration has changed Cmvn will first regenerate the build scripts and after that executes the underlying build system with the right (configured) settings.
To assist the developer but do not stay in his way, Cmvn does not aim to replace existing build chains.
Instead, its main focus is adding another (first) configuration step
to the build chain to create more reliable and reproducable build environments.
</para>
<para>
In its first release Cmvn supports Apache Maven 2.0 and above.<footnote><para>Using Apache Maven 3.0 is highly recommended.</para></footnote>
In later releases, support for various other build chains might be added, e.g. Apache Ant + Ivy, SBT, JackBuild, or others. 
Although Cmvn generates the build scripts (in Maven case: pom.xml files) is cannot and it does not want to handle all aspects of the underlying build infrastructure.
To leave the full power to the developer, Cmvn supports templates for the underlying build scripts for those settings Cmvn can not generate.
But for common project setup, this is rarely needed.
</para>
<para>Besides the configuration concept, Cmvn brings you concise and maintainable build scripts and empowers you (again) to understand and control your buildsystem! E.g. the <code>cmvn.conf</code> equivalent of the <code>pom.xml</code> in the "Maven in 5 Minutes" tutorial<footnote><para><ulink url="http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html</ulink></para></footnote> looks like this:<programlisting>
project: com.mycompany.app:my-app:1.0-SNAPSHOT;packaging=jar
test: junit:junit:4.8.2
</programlisting></para>

</chapter>

<chapter><title>What's New in Cmvn 0.2.0</title>


<para>New features in Cmvn 0.2.0:</para>
<itemizedlist>
<listitem><para>A new POM converter was added to easily convert existing Maven projects to Cmvn. See <xref linkend="sec:convertPom" />.</para></listitem>
<listitem><para>Experimental support for Jackage repositories. New execution mode <code>--fetch</code> to download Jackage dependencies.</para></listitem>
<listitem><para>Cmvn can now generate <code><![CDATA[<reporting>]]></code>-blocks.</para></listitem>
<listitem><para>Cmvn can now generate <code><![CDATA[<parent>]]></code>-blocks.</para></listitem>
<listitem><para>New execution mode <code>--info</code> to gather various project information, e.g. root project location, variables, ...</para></listitem>

</itemizedlist>

<para>Changes in Cmvn 0.2.0:</para>
<itemizedlist>
<listitem><para>Setting <code>-generateConfigClass</code> was renamed to <code>generateConfigClass</code></para></listitem>
<listitem><para>Setting <code>requireCmvn</code> was renamed to <code>-requireCmvn</code></para></listitem>
<listitem><para>Internally, Cmvn uses now the CmdOption toolkit (<ulink url="http://cmdoption.tototec.de">http://cmdoption.tototec.de</ulink>) to parse commandlines.</para></listitem>
<listitem><para>Inproved up-to-date detection which should now detect all relevant changes in input files.</para></listitem>
<listitem><para>Dependencies, that only differ in it <code>type</code> property are no longer swallowed.</para></listitem>
</itemizedlist>

</chapter>


<chapter id="ch:execModes"><title>Execution Modes</title>
	  
<para>
Cmvn can be run in different execution modes. The main modes are:
<itemizedlist>
<listitem><para>Configuration (<code>--configure</code>, <code>--reconfigure</code>)</para></listitem>
<listitem><para>Fetch (<code>--fetch</code>)</para></listitem>
<listitem><para>Build (<code>--build</code>)</para></listitem>
<listitem><para>Cleanup (<code>--clean</code>, <code>--distclean</code>)</para></listitem>
<listitem><para>Convert POM (<code>--convert-pom</code>)</para></listitem>
<listitem><para>Information (<code>--info</code>)</para></listitem>
</itemizedlist>
</para>
<para>
The execution mode is given as (first) parameter when executing Cmvn.
</para>

<section><title>Configuration</title>
<para>
Simplest Example:
<programlisting><![CDATA[
shell> cmvn --configure
]]></programlisting>
</para>
<para>
Just generate the needed build scripts (if needed) of the underlying buildsystem.
</para>
<para>
For Maven this generates a <code>pom.xml</code> and a Maven settings file <code>.cmvn/settings.xml</code> in a local hidden directory.
</para>
			
<para>For a complete list of options see the built-in commandline help: <code>cmvn --configure --help</code>.</para>

<section><title>Automatic re-configuration</title>

<para>Whenever an input file of Cmvn changed, Cmvn will detect the change at the next execution time and will automatically run a <code>--reconfigure</code> before further processing.</para>

<para>However, if there is for some reason the need to disable this automatism, you can add the <code>--no-auto-reconfigure</code> option when configuring the project. If Cmvn detects, that some input files changed, it will claim, that it is out-ouf-date and needs reconfiguration and stop any further processing.</para>

<para>To reconfigure, one can use the option <code>--reconfigure</code> which does exactly the same as <code>--configure</code> except that the concrete initial configuration is preserved, thus only the files were recreated without changing the current configuration. 
</para>

<programlisting><![CDATA[
shell> cmvn --reconfigure
]]></programlisting>

</section>


<section><title>Changing the Maven Local Repository and Settings</title>
<para>
By default, <code>cmvn --configure</code> initally created an new project-local Maven settings file and thus uses a project-local repository. 
This is intended to isolate projects from each other while still maintaining project-interoperability via (remotely) released dependencies. 
This default way enables the developer to easily build branches without fearing of interferences and inconsistencies caused by multiple projects (branches) that are installing (in the Maven sense) to the same local repository. 
</para>
<para>
Of course, the newly created repository and Maven settings file is shared between all sub projects of the one you just configured.
</para>
<para>
In case, this default behavior is not desired, you can tell Cmvn to use an alternative existing Maven settings file with the option <code>--maven-settings</code>. 
In this case, you could loose the benefits of side-effect free development of multiple project on the same computer. 
Also this may limit the reproducability of the build process in different environments. 
</para>

<programlisting><![CDATA[
shell> cmvn --configure --maven-settings /home/user/.m2/settings.xml
]]></programlisting>

<para>
Notice, that if you use an alternative Maven settings file, Cmvn will not touch this file and the Local Maven Repository when running in cleanup execution mode.
</para>

<para>If all you want is to reuse an existing Maven local repository, you can use the <code>--maven-repo</code> option.</para>

<programlisting><![CDATA[
shell> cmvn --configure --maven-repo /home/user/.m2/repository
]]></programlisting>
       
<para>The <code>--maven-repo</code> option is preferred over <code>--maven-settings</code> as you do not get the potential side effects from the external settings file. As these settings are normally not part of the build environment (e.g. not managed by a version control system), they increase the risk to get non-repoducable builds and build failures.</para>

</section>

<section><title>Using Templates - pom.xml.cmvn</title>
<para>
When Cmvn detects the presence of a file <code>pom.xml.cmvn</code> it will use it as template when generating the pom.xml file for Maven. 
Cmvn will first read the template file and afterward extend it with the settings found in <code>cmvn.conf</code>. 
You can use this to easily migrate existing Maven projects or if you need complex setups and Maven features (like <code><![CDATA[<profile>]]></code>). 
</para>
</section>
</section>

<section><title>Build</title>
<para>
Maven Example: Clean project build and install the build jar file into the local Maven repository.
</para>

<programlisting><![CDATA[
shell> cmvn --build clean install
]]></programlisting>

<para>
The build execution mode is automatically enabled if no other mode was requested and at least one non-option argument was given to Cmvn. So the example above could also be written as:
</para>
<programlisting><![CDATA[
shell> cmvn clean install
]]></programlisting>

</section>

<section><title>Cleanup</title>

<para>
The execution mode cleanup is used to remove all generated files and the configuration data. 
Currently there are two variants to enable the cleanup mode: one version enabled with <code>--clean</code> removes only the generated native build scripts, the other variant <code>--distclean</code> cleans also the configuration state and any other generated environment setup, e.g. a hidden project local Maven repository.
</para>

<programlisting>
shell> cmvn --clean
</programlisting>

<para>
Cleans up all generated native build scripts.
</para>

<programlisting>
shell> cmvn --distclean
</programlisting>

<para>
Cleans up all generated files including configured state.
</para>
</section>

<section id="sec:convertPom"><title>Converting existing Maven projects</title>
<para>To easily use Cmvn with existing Maven projects, one can use the built-in <code>pom.xml</code> converter.</para>

<programlisting><![CDATA[
shell> cmvn --convert-pom --dry-run
]]></programlisting>

<para>This command will show you how the conversion result looks like. If issues are detected, e.g. unresolvable versions for plugins, a warning will be shown.</para>

<para>To convert a whole multi-project recursive, execute the following:</para>

<programlisting><![CDATA[
shell> cmvn --convert-pom --recursive
]]></programlisting>
       
<para>For more options see the built-in commandline help: <code>cmvn --convert-pom --help</code></para>

</section>


</chapter>

<chapter><title>The configuration file <code>cmvn.conf</code></title>
<section><title>Config file syntax</title>

<para>
The config file has a very simplistic human readable and editable format:
</para>

<!--<orderedlist>-->
<itemizedlist>
	<listitem><para><emphasis>empty lines</emphasis> were ignored</para></listitem>
	<listitem><para>the hash sign (<code>#</code>) starts a <emphasis>comment</emphasis> until end of line</para></listitem>
	<listitem><para>each non-comment line consists of a pair of <emphasis>key</emphasis> and <emphasis>value</emphasis> delimited by a colon (<code>:</code>)</para></listitem>
	<listitem><para>keys starting with a hyphen (<code>-</code>) are <emphasis>directives</emphasis> all other keys were <emphasis>settings</emphasis></para></listitem>
	<listitem><para>values may have <emphasis>options</emphasis>, in which case options are separated by a semicolon (<code>;</code>)</para></listitem>
	<listitem><para>value-options are themselves key-value pairs delimited by equal sign (<code>=</code>)</para></listitem>
	<listitem><para>if an option-value is ommitted (an option without an equal sign) it is evaluated to <code>true</code></para></listitem>
	<listitem><para>non-comment lines ending with a backslash (<code>\</code>) were <emphasis>continued</emphasis> on the next line</para></listitem>
</itemizedlist>
<!--</orderedlist>-->

<section><title>Config file example</title>

<para>
	The following is an example project config file <code>cmvn.conf</code>:
</para>

<programlisting><![CDATA[
# Include directive
-include: ../common/cmvncommon.conf

# Immutable variable directive
-val: EXAMPLE_VERSION=0.0.1

# project settings using a variable
# cmvn uses a short syntax for projects and dependencies
# group:artifact:version (GAV) or org:name:rev
project: de.tototec:de.tototec.example:$${EXAMPLE_VERSION}

# a dependency with option spreading two lines
compile: de.tototec:de.tototec.example.utils:$${EXAMPLE_VERSION}; \
 classifier=jdk15

# compile-scope dependency 
compile: org.slf4j:slf4j-api:1.6.1

# optional runtime-dependency
runtime: ch.qos.logback:logback-classic:0.9.26;optional

# test-scope dependency
test: org.testng:testng:5.14.6
]]></programlisting>
</section>

<section><title>Legend</title>
<para>The following sections contain tables that use the following keywords in the format column:</para>

<table>
<title>Legend of Formats</title>
<tgroup cols="2" colsep="1" rowsep="1">
	<colspec colwidth="1*" />
	<colspec colwidth="4*" />
<thead>
<row>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>BOOLEAN</entry>
<entry>A boolean value: "true" or "false"</entry>
</row>
<row>
<entry>DIR</entry>
<entry>A directory in the local file system</entry>
</row>
<row>
<entry>FILE</entry>
<entry>A file in the local file system</entry>
</row>
<row>
<entry>GAV</entry>
<entry><emphasis>groupId</emphasis>:<emphasis>artifactId</emphasis>:<emphasis>version</emphasis> (analog to Maven) or <emphasis>org</emphasis>:<emphasis>name</emphasis>:<emphasis>rev</emphasis> (analog to Ivy)</entry>
</row>
<row>
<entry>GA</entry>
<entry>Same as GAV, but without a version</entry>
</row>
<row>
<entry>LIST[X]</entry>
<entry>A semicolon delimited list of X (if ommitted, than text)</entry>
</row>
<row>
<entry>OPTION</entry>
<entry>A <emphasis>key</emphasis>=<emphasis>value</emphasis> pair</entry>
</row>
<row>
<entry>TEXT</entry>
<entry>Text</entry>
</row>
<row>
<entry>URL</entry>
<entry>A URL</entry>
</row>
<row>
<entry>VERSION</entry>
<entry>A version number</entry>
</row>
<row>
<entry>XML</entry>
<entry>A XML fragement</entry>
</row>
</tbody>
</tgroup>
</table>

</section>

<section><title>Directives Overview</title>
<para>Directives are instructions to Cmvn to do something special.</para>

<table>
<title>Directives</title>
<tgroup cols="3" colsep="1" rowsep="1">
	<colspec colwidth="1*" />
	<colspec colwidth="1*" />
	<colspec colwidth="3*" />
<thead>
<row>
<entry>Directive</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>-configClass</code></entry>
<entry>LIST[OPTION]</entry>
<entry>Deprecated. See <code>configClass</code> setting.</entry>
</row>
<row>
<entry><code>-include</code></entry>
<entry>FILE</entry>
<entry>Include the content of the given file. The content will be treated as if it was in the actual file.</entry>
</row>
<row>
<entry><code>-requireCmvn</code></entry>
<entry>VERSION</entry>
<entry>Ensure, that the version of the executing Cmvn executable is at least the given version.</entry>
</row>
<row>
<entry><code>-val</code></entry>
<entry>OPTION</entry>
<entry>Create an immutable variable <emphasis>key</emphasis> with content <emphasis>value</emphasis>. All occurences of this variable were expanded in the value-part of all succeeding lines (except <code>-include</code>).</entry>
</row>
</tbody>
</tgroup>
</table>

</section>

<section><title>Settings Overview</title>
<para>Settings are used to generate the underlying (native) build scripts. Currently the only supported buildsystem is Maven 2 or greater.</para>

<table>
<title>Settings</title>
<tgroup cols="3" colsep="1" rowsep="1">
<colspec colwidth="1.5*" />
<colspec colwidth="1*" />
<colspec colwidth="2*" />
<thead>
<row>
<entry>Setting</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>artifactrepo</code></entry>
<entry>URL[;OPTION]*</entry>
<entry>Alias for <code>repository</code> with option <code>plugins=false</code></entry>
</row>
<row>
<entry><code>compile</code></entry>
<entry>GAV[;OPTION]*</entry>
<entry>Alias for <code>dependency</code> with option <code>scope=compile</code></entry>
</row>
<row>
<entry><code>configClass</code></entry>
<entry>LIST[OPTION]</entry>
<entry>Generate a Java class as source code containing static methods.</entry>
</row>
<row>
<entry><code>dependency</code></entry>
<entry>GAV[;OPTION]*</entry>
<entry>A project/package dependency</entry>
</row>
<row>
<entry><code>dependencyManagement</code></entry>
<entry>GAV[;OPTION]*</entry>
<entry>Managed dependency in <code>dependencyManagement</code>-block</entry>
</row>
<row>
<entry><code>eclipseClasspath</code></entry>
<entry>LIST[OPTION]</entry>
<entry>List of options to generate a <code>.classpath</code> file used by Eclipse.</entry>
</row>
<row>
<entry><code>exclude</code></entry>
<entry>GA</entry>
<entry>Exclude the given dependency in transitive dependencies. Will generate exclusion-blocks in any dependency-block.</entry>
</row>
<row>
<entry><code>module</code></entry>
<entry>DIR[;OPTION]*</entry>
<entry>The path of a sub project</entry>
</row>
<row>
<entry><code>plugin</code></entry>
<entry>GAV[;OPTION]*</entry>
<entry>Maven plugin coordinates</entry>
</row>
<row>
<entry><code>pluginrepo</code></entry>
<entry>URL[;OPTION]*</entry>
<entry>Alias for <code>repository</code> with option <code>artifacts=false</code></entry>
</row>
<row>
<entry><code>project</code></entry>
<entry>GAV[;OPTION]*</entry>
<entry>Project coordinates</entry>
</row>
<row>
<entry><code>property</code></entry>
<entry>OPTION</entry>
<entry>Definition of property <emphasis>key</emphasis> with value <emphasis>value</emphasis></entry>
</row>
<row>
<entry><code>provided</code></entry>
<entry>GAV[;OPTION]*</entry>
<entry>Alias for <code>dependency</code> with option <code>scope=provided</code></entry>
</row>
<row>
<entry><code>repo</code></entry>
<entry>URL[;OPTION]*</entry>
<entry>Alias for <code>repository</code></entry>
</row>
<row>
<entry><code>repository</code></entry>
<entry>URL[;OPTION]*</entry>
<entry>Maven Repository</entry>
</row>
<row>
<entry><code>runtime</code></entry>
<entry>GAV[;OPTION]*</entry>
<entry>Alias for <code>dependency</code> with option <code>scope=runtime</code></entry>
</row>
<row>
<entry><code>system</code></entry>
<entry>GAV[;OPTION]*</entry>
<entry>Alias for <code>dependency</code> with option <code>scope=system</code></entry>
</row>
<row>
<entry><code>test</code></entry>
<entry>GAV[;OPTION]*</entry>
<entry>Alias for <code>dependency</code> with option <code>scope=test</code></entry>
</row>
</tbody>
</tgroup>
</table>

</section>

<section><title><code>project</code></title>
<para>Essential project information mandatory for Maven.</para>
<para>Format: GAV[;OPTION]*</para>
<para>Options:</para>

<table>
<title>Options for <code>project</code></title>
<tgroup cols="3" colsep="1" rowsep="1">
	<colspec colwidth="1*" />
	<colspec colwidth="1*" />
	<colspec colwidth="3*" />
<thead>
<row>
<entry>Option</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>packaging</code></entry>
<entry>TEXT</entry>
<entry>The packaging of the project, if omitted, then <code>jar</code></entry>
</row>
</tbody>
</tgroup>
</table>

<para>Example:</para>

<programlisting><![CDATA[
# using maven-bundle-plugin
project: org.example:org.example.osgibundle:1.0.0;packaging=bundle
]]></programlisting>

</section>

<section><title><code>module</code></title>
<para>Definition of a sub project.</para>
<para>Format: DIR[;OPTION]*</para>
<para>Options:</para>
       
<table>
<title>Options for <code>module</code></title>
<tgroup cols="3" colsep="1" rowsep="1">
	<colspec colwidth="1*" />
	<colspec colwidth="1*" />
	<colspec colwidth="3*" />
<thead>
<row>
<entry>Option</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>skipCmvn</code></entry>
<entry>BOOLEAN</entry>
<entry>This sub project is a pure Maven project. Do not try to find a <code>cmvn.conf</code> file.</entry>
</row>
</tbody>
</tgroup>
</table>

<para>Example:</para>
<programlisting><![CDATA[
module: org.example.domain
module: org.example.service
module: org.example.service.impl.legacy;skipCmvn
]]></programlisting>

</section>

<section><title><code>dependency</code></title>
<para>A dependency referencing a project in a Maven repository (in most cases a <code>*.jar</code> file).</para>
<para>Format: GAV[;OPTION]*</para>
<para>Options:</para>

<table>
<title>Options for <code>dependency</code></title>
<tgroup cols="3" colsep="1" rowsep="1">
	<colspec colwidth="1*" />
	<colspec colwidth="1*" />
	<colspec colwidth="3*" />
<thead>
<row>
<entry>Option</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>scope</code></entry>
<entry>TEXT</entry>
<entry>The scope of the dependency. One of <code>compile</code>, <code>runtime</code>, <code>test</code>, <code>system</code> or <code>provided</code>.</entry>
</row>
<row>
<entry><code>systemPath</code></entry>
<entry>FILE</entry>
<entry>The local file path to the jar file. Only valid if <code>scope</code> is <code>system</code>. In contrast to Maven specification, this path can be also relative.</entry>
</row>
<row>
<entry><code>classifier</code></entry>
<entry>TEXT</entry>
<entry>The classifier, e.g. <code>sources</code>.</entry>
</row>
<row>
<entry><code>type</code></entry>
<entry>TEXT</entry>
<entry>The type.</entry>
</row>
<row>
<entry><code>optional</code></entry>
<entry>BOOLEAN</entry>
<entry>An optional dependency is not optional for the current project but will be ignored in a transitive dependency resolution. (In an ideal world any compile time dependency should be optional!)</entry>
</row>
<row>
<entry><code>exclude</code></entry>
<entry>GA</entry>
<entry>Excluded dependency from transitive resolved dependency tree.</entry>
</row>
<row>
<entry><code>forceversion</code></entry>
<entry>BOOLEAN</entry>
<entry>Additionally the dependency will be added to the <code><![CDATA[<dependencyManagement>]]></code>-block. This enforces the given version and is sometimes an alternative to the <code>exclude</code> option (and vice versa).</entry>
</row>
</tbody>
</tgroup>
</table>

<para>Aliases:</para>

<table>
<title>Aliases for <code>dependency</code></title>
<tgroup cols="2" colsep="1" rowsep="1">
	<colspec colwidth="1*" />
	<colspec colwidth="2*" />
<thead>
<row>
<entry>Alias</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>compile</code></entry>
<entry>A dependency with option <code>scope=compile</code>.</entry>
</row>
<row>
<entry><code>test</code></entry>
<entry>A dependency with option <code>scope=test</code>.</entry>
</row>
<row>
<entry><code>runtime</code></entry>
<entry>A dependency with option <code>scope=runtime</code>.</entry>
</row>
<row>
<entry><code>system</code></entry>
<entry>A dependency with option <code>scope=system</code>.</entry>
</row>
<row>
<entry><code>dependencyManagement</code></entry>
<entry>A managed dependency only in <code>dependencyManagement</code>-block.</entry>
</row>
<row>
<entry><code>provided</code></entry>
<entry>A dependency with option <code>scope=provided</code>.</entry>
</row>
</tbody>
</tgroup>
</table>

<para>Example:</para>
<programlisting><![CDATA[
compile: org.slf4j:slf4j-api:1.6.1;optional
compile: org.slf4j:jcl-over-slf4j:1.6.1;optional;forceversion
test: org.testng:testng:6.0.1
]]></programlisting>

</section>

<section><title><code>property</code></title>
<para>Define a property in a <code><![CDATA[<properties>]]></code>-block.</para>
<para>Format: OPTION</para>
<para>Example:</para>
<programlisting><![CDATA[
property: maven.compiler.source=1.6
property: maven.compiler.target=1.6
property: project.build.sourceEncoding=UTF-8
]]></programlisting>

</section>

<section><title><code>repository</code></title>
<para>A remote Maven repository used to download dependencies.</para>
<para>Format: URL[;OPTION]*</para>
<para>Options:</para>

<table>
<title>Options for <code>repository</code></title>
<tgroup cols="3" colsep="1" rowsep="1">
	<colspec colwidth="1*" />
	<colspec colwidth="1*" />
	<colspec colwidth="3*" />
<thead>
<row>
<entry>Option</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>plugins</code></entry>
<entry>BOOLEAN</entry>
<entry>Can be used to download Maven plugins (default: <code>true</code>).</entry>
</row>
<row>
<entry><code>artifacts</code></entry>
<entry>BOOLEAN</entry>
<entry>Can be used to download Maven artifacts (default: <code>true</code>).</entry>
</row>
<row>
<entry><code>releases</code></entry>
<entry>BOOLEAN</entry>
<entry>Can be used to download released dependencies.</entry>
</row>
<row>
<entry><code>snapshots</code></entry>
<entry>BOOLEAN</entry>
<entry>Can be used to download snapshot dependencies.</entry>
</row>
</tbody>
</tgroup>
</table>

<!-- TODO: Missing option id -->

<para>Aliases:</para>

<table>
<title>Aliases for <code>repository</code></title>
<tgroup cols="2" colsep="1" rowsep="1">
	<colspec colwidth="1*" />
	<colspec colwidth="3*" />
<thead>
<row>
<entry>Alias</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>repo</code></entry>
<entry>Same as <code>repository</code>.</entry>
</row>
<row>
<entry><code>pluginrepo</code></entry>
<entry>A repository with option <code>artifacts=false</code>.</entry>
</row>
<row>
<entry><code>artifactrepo</code></entry>
<entry>A repository with option <code>plugins=false</code>.</entry>
</row>
</tbody>
</tgroup>
</table>

</section>

<section><title><code>plugin</code></title>
<para>A Maven plugin contribution to the Maven lifecycle.</para>
<para>Format: GAV[;OPTION]*</para>
<para>Options: Any option has the format OPTION and is added to the <code><![CDATA[<configuration>]]></code>-block of the plugin definition.</para>
<para>Directives:</para>

<table>
<title>Directives for <code>plugin</code></title>
<tgroup cols="3" colsep="1" rowsep="1">
	<colspec colwidth="1.2*" />
	<colspec colwidth="1*" />
	<colspec colwidth="2*" />
<thead>
<row>
<entry>Directive</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>-extension</code></entry>
<entry>BOOLEAN</entry>
<entry>Specify if this plugin is an extensions-plugin (and thus e.g. can contribute new project packaging types).</entry>
</row>
<row>
<entry><code>-execution</code></entry>
<entry>XML</entry>
<entry>A free XML fragement that will be placed inside the <code><![CDATA[<executions>]]></code>-block of this plugin.</entry>
</row>
<row>
<entry><code>-plugindependency</code></entry>
<entry>GAV</entry>
<entry>A dependency used when executing the plugin command, e.g. to override a version.</entry>
</row>
<row>
<entry><code>-xml:</code><emphasis>anyOption</emphasis></entry>
<entry>XML</entry>
<entry>Can be used if the option-value is XML and not text.</entry>
</row>
</tbody>
</tgroup>
</table>

<para>Example:</para>
<programlisting><![CDATA[
plugin: org.apache.maven.plugins:maven-assembly-plugin:2.2-beta-5; \
 appendAssemblyId=false; \
 -xml:descriptorRefs= \
    <descriptorRef>jar-with-dependencies</descriptorRef>; \
 -xml:archive= \
    <manifest> \
      <mainClass>org.example.Main</mainClass> \
    </manifest>
]]></programlisting>

</section>

<section><title><code>build</code></title>
<para>Redefine some project default settings.</para>
<para>Format: LIST[OPTION]</para>
<para>Options:</para>

<table>
<title>Options for <code>build</code></title>
<tgroup cols="3" colsep="1" rowsep="1">
	<colspec colwidth="1*" />
	<colspec colwidth="1*" />
	<colspec colwidth="3*" />
<thead>
<row>
<entry>Option</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>sources</code></entry>
<entry>DIR</entry>
<entry>The directory containing the source files.</entry>
</row>
<row>
<entry><code>testSources</code></entry>
<entry>DIR</entry>
<entry>The directory containing the test source files.</entry>
</row>
<row>
<entry><code>finalName</code></entry>
<entry>FILE</entry>
<entry>The name of the final build JAR file.</entry>
</row>
<row>
<entry><code>targetDir</code></entry>
<entry>DIR</entry>
<entry>The directory containing the build output files (e.g. <code>target</code>).</entry>
</row>
</tbody>
</tgroup>
</table>

</section>

<section id="sec:settingsEclipseClasspath"><title><code>eclipseClasspath</code></title>
<para>Generate a <code>.classpath</code> file which can be used by Eclipse to generate the project classpath container.</para>
<para>Format: LIST[OPTION]</para>
<para>Options:</para>

<table>
<title>Options for <code>eclipseClasspath</code></title>
<tgroup cols="3" colsep="1" rowsep="1">
	<colspec colwidth="1*" />
	<colspec colwidth="1*" />
	<colspec colwidth="3*" />
<thead>
<row>
<entry>Option</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><code>autoGenerate</code></entry>
<entry>TEXT</entry>
<entry>Auto-generate lib-entries for project dependencies of the given scope. Supported scopes are: compile (includes provided and system), test, runtime.</entry> </row>
<row>
<entry><code>optional</code></entry>
<entry>BOOLEAN</entry>
<entry>Generate an optional-marker for the actual entry. </entry>
</row>
<row>
<entry><emphasis>key</emphasis></entry>
<entry>TEXT</entry>
<entry>A free <emphasis>key</emphasis> added as attribute in the classpathentry-element. Known supported attributes are, e.g.: kind, path, output, sourcepath, ...</entry>
</row>
</tbody>
</tgroup>
</table>

<para>Example:</para>
<para>Multiple given eclipseClasspath settings to configure a Java 6 project with tests.</para>

<programlisting><![CDATA[
eclipseClasspath: kind=src;path=src/main/java
eclipseClasspath: kind=src;path=src/main/resources
eclipseClasspath: kind=output;path=target/classes
eclipseClasspath: kind=src;output=target/test-classes;path=src/test/java
eclipseClasspath: kind=con;path=org.eclipse.jdt.launching.JRE_CONTAINER/\
org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6
eclipseClasspath: autoGenerate=compile
eclipseClasspath: autoGenerate=test
]]></programlisting>

       <para>This Feature is deprecated and superceeded by the Eclipse Classpath Container for Cmvn (see <xref linkend="ch:eclipseCpContainer" />).</para>

</section>

</section>
</chapter>


<chapter id="ch:eclipseCpContainer"><title>Eclipse Classpath Container</title>
<para>Since Cmvn 0.1.8 there is an Eclipse Cmvn Plugin that provides a classpath container, thus making the use of other classpath containers like the Maven classpath container obsolete.</para>
<para>Features:</para>
<itemizedlist>
<listitem><para>Provides classpath dependencies instantly</para></listitem>
<listitem><para>non-transitive classpath, only add explicit listed dependencies to classpath</para></listitem>
<listitem><para>different resolution scopes configurable (compile, runtime, test)</para></listitem>
<listitem><para>very fast (especially a lot faster than Maven and Ivy classpath containers)</para></listitem>
<listitem><para>Workspace resolution for dependencies (configurable)</para></listitem>
<listitem><para>uses project-local configuration (uses exact same repositories and dependencies as the command line tool)</para></listitem>
<listitem><para>supports attached sources and javadoc</para></listitem>
</itemizedlist>

<para>Restrictions in Cmvn 0.1.8 (fixed in later versions, e.g. 0.2.0):</para>
<itemizedlist>
<listitem><para>If cmvn was configured with <code>--maven-settings</code> the Cmvn classpath container will fall back to a <code>M2_REPO</code> variable, which must be defined in Eclipse. In most cases you should prefer the <code>--maven-repo</code> commandline switch to specify external local Maven repositories.</para></listitem>
</itemizedlist>

       <para>Notice: If you use the Eclipse Cmvn classpath container, you usually do not want to use the <code>eclipseClasspath autoGenerate</code> setting (see <xref linkend="sec:settingsEclipseClasspath" />).</para>

</chapter>

<chapter><title>Terms of Use (License)</title>
<para>Cmvn is published under the Apache License, Version 2.0.</para>
<para><ulink url="http://www.apache.org/licenses/LICENSE-2.0">http://www.apache.org/licenses/LICENSE-2.0</ulink></para>
</chapter>

<chapter><title>Installation</title>

<section><title>Unix/Linux/MacOSX: Shell Wrapper</title>
<para>Cmvn is distributed as executable jar including all its required dependencies.</para>
<para>For convenience, you may want to create a simple shell script <code>cmvn</code> as an executable wrapper around the program:</para>
<programlisting><![CDATA[
#!/bin/sh
# pass all arguments to cmvn with $@
exec java -jar cmvn-executable-0.2.0.jar "$@"
]]></programlisting>

</section>

<section><title>Windows: Using the binary</title>
<para>Since Cmvn 0.1.4 there is also a released Windows binary version <code>cmvn-0.1.4.exe</code>. As long as this executable exists on the search path (<code>PATH</code>-variable), no command shell wrapper is needed.</para>

<section><title>Windows: Command Shell Wrapper</title>
<para>If you can not or want not use the executable binary version of Cmvn for Windows, you can alternatively use a command shell wrapper like this one:</para>

<programlisting><![CDATA[
:init
@REM Decide how to startup depending on the version of windows

@REM -- Windows NT with Novell Login
if "%OS%"=="WINNT" goto WinNTNovell

@REM -- Win98ME
if NOT "%OS%"=="Windows_NT" goto Win9xArg

:WinNTNovell

@REM -- 4NT shell
if "%@eval[2+2]" == "4" goto 4NTArgs

@REM -- Regular WinNT shell
set CMVN_CMD_LINE_ARGS=%*
goto endInit

@REM The 4NT Shell from jp software
:4NTArgs
set CMVN_CMD_LINE_ARGS=%$
goto endInit

:Win9xArg
@REM Slurp the command line arguments.  This loop allows for an unlimited number
@REM of agruments (up to the command line limit, anyway).
set CMVN_CMD_LINE_ARGS=
:Win9xApp
if %1a==a goto endInit
set CMVN_CMD_LINE_ARGS=%CMVN_CMD_LINE_ARGS% %1
shift
goto Win9xApp

@REM Reaching here means variables are defined and arguments have been captured
:endInit
SET CMVN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"

%CMVN_JAVA_EXE% -jar cmvn-executable.jar %CMVN_CMD_LINE_ARGS%

set CMVN_JAVA_EXE=
set CMVN_CMD_LINE_ARGS=
]]></programlisting>

</section>
</section>
</chapter>



</book>

